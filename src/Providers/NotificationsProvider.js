import URL from 'url';
import querystring from 'querystring';
import { Component } from 'react';
import { Linking, Platform } from 'react-native';
import PropTypes from 'prop-types';
import gql from 'graphql-tag';
import { withApollo } from 'react-apollo';
import { get } from 'lodash';
import { resolvers, defaults } from '../store';
import PushNotification from 'react-native-push-notification'

const UPDATE_DEVICE_PUSH_ID = gql`
  mutation updateDevicePushId($enabled:Boolean, $bindingType:String, $address:String) {
    updateUserTwilioNotifyPushSettings(input:{ enabled: $enabled, bindingType: $bindingType, address: $address}) {
      firstName
      lastName
    }
  }
`;

const BINDING_TYPE = {
  ios: "apn",
  android: "gcn"
}

class NotificationsProvider extends Component {
  static propTypes = {
    children: PropTypes.oneOfType([
      PropTypes.arrayOf(PropTypes.node),
      PropTypes.node,
    ]).isRequired,
    navigate: PropTypes.func.isRequired,
    client: PropTypes.shape({
      mutate: PropTypes.func,
      addResolvers: PropTypes.func,
      writeData: PropTypes.func,
      onResetStore: PropTypes.func,
    }).isRequired,
  };

  static navigationOptions = {};

  constructor(props) {
    super(props);
    const { client } = props;
    client.addResolvers(resolvers);
    client.writeData({ data: defaults });
    client.onResetStore(() => client.writeData({ data: defaults }));

    const bindingType = get(BINDING_TYPE, Platform.OS, "")

    PushNotification.configure({
      // Called when Token is generated (iOS and Android)
      onRegister: function (address) {
        console.log('TOKEN:', address);

        // Sends the token generated by the device to the updateUserTwilioNotifyPushSettings endpoint
        this.props.client.mutate({
          mutation: UPDATE_DEVICE_PUSH_ID,
          variables: { enabled: true, bindingType, address },
        });
      },

      // (required) Called when a remote or local notification is opened or received
      onNotification: function (notification) {
        console.log('NOTIFICATION:', notification);

        // TODO : process the notification

        // required on iOS only (see fetchCompletionHandler docs: https://facebook.github.io/react-native/docs/pushnotificationios.html)
        notification.finish(PushNotificationIOS.FetchResult.NoData);
      },

      // ANDROID ONLY: GCM or FCM Sender ID (product_number)
      // senderID: 'YOUR GCM (OR FCM) SENDER ID',

      // IOS ONLY: Permissions to register
      permissions: {
        alert: true,
        badge: true,
        sound: true
      },

      // Should the initial notification be popped automatically
      // default: true
      popInitialNotification: true,

      // does not request permissions automatically
      requestPermissions: false
    });
  }

  componentDidMount() {
    Linking.getInitialURL().then((url) => {
      this.navigate(url);
    });
    Linking.addEventListener('url', ({ url }) => this.navigate(url));
  }

  componentWillUnmount() {
    Linking.removeEventListener('url');
  }

  // TODO : navigate through the app based on data sent in the push notification
  // navigate = (rawUrl) => {
  //   if (!rawUrl) return;
  //   const url = URL.parse(rawUrl);
  //   const route = url.pathname.substring(1);
  //   const args = querystring.parse(url.query);
  //   this.props.navigate(route, args);
  // };

  navigate = () => true

  onOpened = (openResult) => {
    console.log('Message: ', openResult.notification.payload.body);
    console.log('Data: ', openResult.notification.payload.additionalData);
    console.log('isActive: ', openResult.notification.isAppInFocus);
    console.log('openResult: ', openResult);
    // URL looks like this
    // apolloschurchapp://AppStackNavigator/Connect
    // apolloschurchapp://SomethingElse/Connect
    // apolloschurchapp://SomethingElse/ContentSingle?itemId=SomeItemId:blablalba
    const url = get(openResult, 'notification.payload.additionalData.url');
    if (url) {
      this.navigate(url);
    }
  };

  onIds = (device) => {
    this.props.client.mutate({
      mutation: UPDATE_DEVICE_PUSH_ID,
      variables: { pushId: device.userId },
    });
  };

  render() {
    return this.props.children;
  }
}

export default withApollo(NotificationsProvider);
